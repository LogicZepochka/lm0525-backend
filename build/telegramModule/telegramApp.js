"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_telegram_bot_api_1 = __importDefault(require("node-telegram-bot-api"));
const config_1 = __importDefault(require("../config/config"));
const types_1 = require("./types");
const prisma_1 = __importDefault(require("../tools/prisma"));
const callbacks_1 = __importDefault(require("./callbacks"));
const Logger_1 = __importDefault(require("../tools/Logger"));
function generateRandomFiveDigitNumber() {
    const min = 10000;
    const max = 99999;
    return Math.floor(Math.random() * (max - min + 1)) + min;
}
const Logger = (0, Logger_1.default)("TELEGRAM-BOT");
const Telegram = new class Telegam {
    constructor() {
        Logger("Creating telegram bot...");
        this.bot = new node_telegram_bot_api_1.default(config_1.default.telegram.API, { polling: true });
        this.activationPairs = new Map();
        (0, callbacks_1.default)(this.bot);
        this.bot.onText(/\/start/, async (msg) => {
            Logger("–ó–∞–ø—É—Å–∫ –∫–æ–º–º–∞–Ω–¥—ã start –¥–ª—è –±–æ—Ç–∞");
            const opts = {
                reply_markup: {
                    keyboard: [
                        [{ text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', request_contact: true }]
                    ],
                    resize_keyboard: true
                },
                parse_mode: 'MarkdownV2'
            };
            await this.bot.sendMessage(msg.chat.id, ("–ü—Ä–∏–≤–µ—Ç\\!\n\n\
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\\.\n\n\
_–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É –ø–æ–¥ —Å—Ç—Ä–æ–∫–æ–π –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è_\n\
–≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –º–Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–±—è\\.\n\
\n\
\n\
–û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —Ç–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¢–µ–ª–µ–≥—Ä–∞–º–º—É\\. –ò–Ω–∞—á–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è"), opts);
        });
        this.bot.on("contact", async (contact) => {
            try {
                if (!contact.contact?.user_id || contact.contact?.user_id != contact.chat?.id) {
                    await this.bot.sendMessage(contact.chat.id, `‚ÄºÔ∏è –¢—ã –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ª–∏–±–æ —Ç–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Ç–≤–æ–µ–º—É —Ç–µ–ª–µ–≥—Ä–∞–º–º –∞–∫–∫–∞—É–Ω—Ç—É\\.\n\n\
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Å—å —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—à—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä, –ª–∏–±–æ –≤—ã–ø–æ–ª–Ω–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ –Ω–æ–º–µ—Ä, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ —Ç–µ–ª–µ–≥—Ä–∞–º–º\\.`, { parse_mode: 'MarkdownV2' });
                    return;
                }
                else {
                    let msgToEdit = await this.bot.sendMessage(contact.chat.id, "_–ü–æ–ª—É—á–∏–ª —Ç–≤–æ–π –Ω–æ–º–µ—Ä, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏\\.\\.\\._", { parse_mode: 'MarkdownV2' });
                    let user = await prisma_1.default.user.findFirst({ where: { phone: contact.contact.phone_number } });
                    console.log("User", user);
                    if (!user) {
                        console.log("User not found");
                        await this.bot.editMessageText(`–¢—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –≤ LM0525.\n\
–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Ç—ã –º–æ–∂–µ—à—å –∑–¥–µ—Å—å: ${config_1.default.telegram.FrontEndURL}/register`, { chat_id: msgToEdit.chat.id, message_id: msgToEdit.message_id,
                            reply_markup: {
                                inline_keyboard: [
                                    [{ text: "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", url: `${config_1.default.telegram.FrontEndURL}/register` }]
                                ]
                            }
                        });
                        return;
                    }
                    console.log("User found");
                    if (!user?.telegramChat) {
                        let code = generateRandomFiveDigitNumber().toString();
                        console.log("Activation code created:", code);
                        this.activationPairs.set(code, {
                            phone: contact.contact.phone_number,
                            ExpiredIn: Date.now() + 300000,
                            chatId: msgToEdit.chat.id
                        });
                        await this.bot.editMessageText(`‚úÖ –¢–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ LM0525\n\n\
–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–º —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º –≤ LM0525 –≤–≤–µ–¥–∏ –¥–∞–Ω–Ω—ã–π –∫–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n\
\n\
–ö–æ–¥ –ø—Ä–∏–≤—è–∑–∫–∏: \`${code}\`\n\n\
_–ù–∞–∂–º–∏ –Ω–∞ –∫–æ–¥, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞_`, { parse_mode: 'MarkdownV2', chat_id: msgToEdit.chat.id, message_id: msgToEdit.message_id, reply_markup: {
                                inline_keyboard: [
                                    [{ text: '–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è', url: `${config_1.default.telegram.FrontEndURL}/register/bindTelegram` }]
                                ]
                            } });
                    }
                    else {
                        console.log("Account already activated");
                        await this.bot.editMessageText("‚úÖ *–¢–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏ —Å–≤—è–∑–∞–Ω*\\.\n\n\
–ï—Å–ª–∏ —Ç—ã –Ω–µ –ø–æ–º–Ω–∏—à—å —Å–≤–æ–π –ø–∞—Ä–æ–ª—å \\- –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π _\"–ó–∞–±—ã–ª –ø–∞—Ä–æ–ª—å\"_ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", { chat_id: msgToEdit.chat.id, message_id: msgToEdit.message_id, parse_mode: 'MarkdownV2' });
                    }
                }
            }
            catch (e) {
                console.log(e);
            }
        });
        Logger("–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ");
    }
    async SendNotification(User, message, Level = types_1.NotificationLevel.Normal) {
        try {
            Logger(`–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${User.name}`);
            if (!User.telegramChat) {
                Logger(`–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${User.name}: –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Ç–µ–ª–µ–≥—Ä–∞–º—É`);
                return;
            }
            let telegramSetting = User.telegramSettings;
            if (!telegramSetting.EnableNotifications && Level === types_1.NotificationLevel.Normal) {
                Logger(`–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${User.name}: –æ—Ç–∫–ª—é—á–µ–Ω—ã –æ–ø–æ–≤–µ—â–µ–Ω–∏—è`);
                return;
            }
            await this.bot.sendMessage(User.telegramChat, message, { parse_mode: 'MarkdownV2' });
        }
        catch (e) {
            Logger(`–ù–ï –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ${User.name}: ${e}`);
        }
    }
    async ActivateUserByCode(code) {
        if (this.activationPairs.has(code)) {
            let activator = this.activationPairs.get(code);
            if (!activator)
                return false;
            if (activator.ExpiredIn < Date.now()) {
                return false;
            }
            let settings = {
                EnableNotifications: true
            };
            let user = await prisma_1.default.user.update({ where: { phone: activator.phone }, data: { telegramChat: activator.chatId.toString(), telegramSettings: settings } });
            this.SendNotification(user, `‚úÖ *–ü—Ä–∏–≤—è–∑—ã–≤–∞–Ω–∏–µ –∫ LM0525 —É—Å–ø–µ—à–Ω–æ:* ‚úÖ\n\
\n\
_–°–≤—è–∑–∞–Ω–Ω–∞—è —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å:_\n\
*–ò–º—è –§–∞–º–∏–ª–∏—è:* _${user.name.replace(/[.,*\/\-+?:"{}\\]/g, '')}_\n\
*–ú–∞–≥–∞–∑–∏–Ω:* _${user.shopId}_\n\
*–û—Ç–¥–µ–ª:* _${user.departamentId}_\n\

–°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞: ${user.role == "NOTAPROVED" ? "üü† –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º" : "üü¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"}`, types_1.NotificationLevel.Security);
            this.activationPairs.delete(code);
            Logger(`–£—Å–ø–µ—à–Ω–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.name}`);
        }
        else {
            return false;
        }
        return true;
    }
};
exports.default = Telegram;
