import TelegramBot from "node-telegram-bot-api";
import config from "../config/config";
import { ActivationPair, TelegramSettings, NotificationLevel } from "./types";
import { User } from "../../generated/prisma";
import Prisma from "../tools/prisma";
import AddApproveCallback from "./callbacks";

function generateRandomFiveDigitNumber(): number {
  const min = 10000;
  const max = 99999;
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

const Telegram = new class Telegam {

    bot: TelegramBot
    activationPairs: Map<string,ActivationPair>

    constructor() {
        this.bot = new TelegramBot(config.telegram.API,{polling: true});
        
        this.activationPairs = new Map<string,ActivationPair>();
        console.log("TELEGRAM ENABLED")
        AddApproveCallback(this.bot);

        this.bot.onText(/\/start/,async (msg) => {
            const opts: TelegramBot.SendMessageOptions = {
                reply_markup: {
                    keyboard: [
                        [{text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',request_contact: true}]
                    ],
                    resize_keyboard: true
                },
                parse_mode: 'MarkdownV2'
            };
            await this.bot.sendMessage(
                msg.chat.id,
                (
"–ü—Ä–∏–≤–µ—Ç\\!\n\n\
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\\.\n\n\
_–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É –ø–æ–¥ —Å—Ç—Ä–æ–∫–æ–π –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è_\n\
–≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –º–Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–±—è\\.\n\
\n\
\n\
–û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —Ç–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¢–µ–ª–µ–≥—Ä–∞–º–º—É\\. –ò–Ω–∞—á–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è"),
                opts
            )
        });

        this.bot.on("contact",async (contact) => {
            try {
                if(!contact.contact?.user_id|| contact.contact?.user_id != contact.chat?.id) {
                    await this.bot.sendMessage(
                    contact.chat.id,
`‚ÄºÔ∏è –¢—ã –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ª–∏–±–æ —Ç–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Ç–≤–æ–µ–º—É —Ç–µ–ª–µ–≥—Ä–∞–º–º –∞–∫–∫–∞—É–Ω—Ç—É\\.\n\n\
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Å—å —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—à—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä, –ª–∏–±–æ –≤—ã–ø–æ–ª–Ω–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ –Ω–æ–º–µ—Ä, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ —Ç–µ–ª–µ–≥—Ä–∞–º–º\\.`
                    ,{parse_mode:'MarkdownV2'}
                )
                    return;
                }
                else {
                    let msgToEdit = await this.bot.sendMessage(
                    contact.chat.id,
                    "_–ü–æ–ª—É—á–∏–ª —Ç–≤–æ–π –Ω–æ–º–µ—Ä, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏\\.\\.\\._"
                    ,{parse_mode:'MarkdownV2'});
                    let user = await Prisma.user.findFirst({where:{phone: contact.contact.phone_number}});
                    console.log("User",user);
                    if(!user) {
                        console.log("User not found");
                        await this.bot.editMessageText(
`–¢—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –≤ LM0525.\n\
–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Ç—ã –º–æ–∂–µ—à—å –∑–¥–µ—Å—å: ${config.telegram.FrontEndURL}/register`,{chat_id: msgToEdit.chat.id, message_id: msgToEdit.message_id,
    reply_markup: {
        inline_keyboard: [
            [{text:"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è",url:`${config.telegram.FrontEndURL}/register`}]
        ]
    }
})
                        return;
                    }
                    console.log("User found");
                    if(!user?.telegramChat) {
                        let code: string = generateRandomFiveDigitNumber().toString();
                        console.log("Activation code created:",code);
                        this.activationPairs.set(code,{
                            phone: contact.contact.phone_number,
                            ExpiredIn: Date.now() + 300000,
                            chatId: msgToEdit.chat.id
                        });
                        await this.bot.editMessageText(
`‚úÖ –¢–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ LM0525\n\n\
–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–º —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º –≤ LM0525 –≤–≤–µ–¥–∏ –¥–∞–Ω–Ω—ã–π –∫–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n\
\n\
–ö–æ–¥ –ø—Ä–∏–≤—è–∑–∫–∏: \`${code}\`\n\n\
_–ù–∞–∂–º–∏ –Ω–∞ –∫–æ–¥, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞_`,

{parse_mode:'MarkdownV2',chat_id: msgToEdit.chat.id, message_id: msgToEdit.message_id, reply_markup: {
                inline_keyboard: [
                    [{text:'–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',url:`${config.telegram.FrontEndURL}/register/bindTelegram`}]
                ]
            }}
                        )
                    }
                    else {
                        console.log("Account already activated");
                        await this.bot.editMessageText(
"‚úÖ *–¢–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏ —Å–≤—è–∑–∞–Ω*\\.\n\n\
–ï—Å–ª–∏ —Ç—ã –Ω–µ –ø–æ–º–Ω–∏—à—å —Å–≤–æ–π –ø–∞—Ä–æ–ª—å \\- –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π _\"–ó–∞–±—ã–ª –ø–∞—Ä–æ–ª—å\"_ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
{chat_id: msgToEdit.chat.id, message_id: msgToEdit.message_id,parse_mode:'MarkdownV2'})
                    }
                }
            }
            catch(e) {
                console.log(e);
            }
        });
    }

    async SendNotification(User: User, message: string, Level: NotificationLevel = NotificationLevel.Normal) {
        try {
            console.log("Sending notification");
        if(!User.telegramChat) {
            console.log("[Telegram Notification] Skipped Telegram Notification: User is not cofirmed");
            return;
        }
        let telegramSetting = User.telegramSettings as TelegramSettings;

        if(!telegramSetting.EnableNotifications && Level === NotificationLevel.Normal)  {
            console.log("[Telegram Notification] Skipped Telegram Notification: User disable notification");
            return;
        }

        await this.bot.sendMessage(User.telegramChat, message, {parse_mode:'MarkdownV2'});
        }
        catch(e) {
            console.log("Failed to send notification: ",e);
        }
    }
    

    async ActivateUserByCode(code: string): Promise<boolean> {
        console.log("binding: code is ",code);
        if(this.activationPairs.has(code)) {
            let activator = this.activationPairs.get(code);
            if(!activator) return false;

            if(activator.ExpiredIn < Date.now()) {
                console.log("failed binding: code is expired");
                return false;
            }
            let settings: TelegramSettings = {
                EnableNotifications: true
            }
            let user = await Prisma.user.update({where:{phone:activator.phone},data:{telegramChat:activator.chatId.toString(), telegramSettings: settings}});
            this.SendNotification(user,
`‚úÖ *–ü—Ä–∏–≤—è–∑—ã–≤–∞–Ω–∏–µ –∫ LM0525 —É—Å–ø–µ—à–Ω–æ:* ‚úÖ\n\
\n\
_–°–≤—è–∑–∞–Ω–Ω–∞—è —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å:_\n\
*–ò–º—è –§–∞–º–∏–ª–∏—è:* _${user.name.replace(/[.,*\/\-+?:"{}\\]/g, '')}_\n\
*–ú–∞–≥–∞–∑–∏–Ω:* _${user.shopId}_\n\
*–û—Ç–¥–µ–ª:* _${user.departamentId}_\n\

–°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞: ${user.role == "NOTAPROVED" ? "üü† –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º" : "üü¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"}`,NotificationLevel.Security);
            this.activationPairs.delete(code);
        }
        else {
            console.log("failed binding: code not found");
            return false;
        }

        return true;
    }
}


export default Telegram;